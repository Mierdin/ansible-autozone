#!/usr/bin/env python2.7

DOCUMENTATION = '''
---
module: getucswwpns
version_added: 0.1
short_description: UCS WWPN retriever
description:
   - Retrieves all vHBAs/WWPNs from a given UCS system, and exports them as a dictionary/JSON file for other modules to pick up and consume
author: Matt Oswalt
'''

import logging
from os.path import isfile
import sys
import time
import json
import select
from UcsSdk import *

EXAMPLES = '''
TBD
'''

#TODO: Make sure you're reporting errors the ansible way (i.e. module.fail_json)

import os

def getucswwpns(module):

  #NOTICE - I am developing much of this functionality in a separate module dedicated to making the UCS Python SDK easier to use. It is likely
  #that any Ansible modules I create that do stuff with UCS (including this one) will in the future make use of this library instead of directly consuming UCS here.

  results = {}
  
  outputfile = module.params['outputfile']
  outputfile = os.path.abspath(outputfile)

  results['outputfile'] = outputfile
  
  #This module is not built to make changes, so we are returning false here.
  results['changed'] = False

  try:

    logging.info("Connecting to UCSM at " + module.params['host'])

    #Connect to UCSM
    handle = UcsHandle()  
    handle.Login(module.params['host'], username=module.params['ucs_user'], password=module.params['ucs_pass'])

    #Instantiate the dictionaries that will hold our WWPNs
    vHBADict = {}
    FabADict = {}
    FabBDict = {}

    #TODO: Statically defining sub-organization for now, will make more dynamic later

    #Need to make a generic function (probably place in central "general functions" file that finds an org at any nest level, 
    #and retrieves ful DN for things like what you're doing below. Allows for org filtering at any level
    ucsOrg = "org-ORG_TEST"

    f = open(outputfile,'w')

    #TODO: For some reason, if the specified org does not exist, this still returns all orgs, rather than erroring out or providing a null value. Need to handle this better
    obj = handle.GetManagedObject(None, None, {"Dn":"org-root/" + ucsOrg + "/"})
    moArr = handle.GetManagedObject(obj, "vnicFc")
    for mo in moArr:
      #Pull only actual vHBAs (not templates) and on the desired fabric (A/B)
      if str(mo.Addr) != 'derived' and mo.SwitchId == 'A':

        #We're retrieving Dn here so we can include the service profile in the name
        origDn = str(mo.Dn)
        
        #Need to do a little string surgery to transform the Dn of the vHBA into a proper zone name.
        origDn = origDn.replace('org-root/' + ucsOrg + '/','')
        origDn = origDn.replace('/','_')
        origDn = origDn.replace('ls-','')
        origDn = origDn.replace('fc-','')

        logging.info('Retrived ' + origDn + ' with address ' + mo.Addr)

        #using the WWPN address as key since more likely to be unique
        FabADict[mo.Addr] = origDn

      elif str(mo.Addr) != 'derived' and mo.SwitchId == 'B':

        #We're retrieving Dn here so we can include the service profile in the name
        origDn = str(mo.Dn)
        
        #Need to do a little string surgery to transform the Dn of the vHBA into a proper zone name.
        origDn = origDn.replace('org-root/' + ucsOrg + '/','')
        origDn = origDn.replace('/','_')
        origDn = origDn.replace('ls-','')
        origDn = origDn.replace('fc-','')

        logging.info('Retrived ' + origDn + ' with address ' + mo.Addr)

        #using the WWPN address as key since more likely to be unique
        FabBDict[mo.Addr] = origDn

    #Populate primary dictionary
    vHBADict['a'] = FabADict
    vHBADict['b'] = FabBDict
    
    json.dump(vHBADict, f, sort_keys=True)

    #Clean-up
    f.close()
    handle.Logout()

    logging.info('WWPNs retrieved, JSON file created.')

  except Exception, err:
    results['failed'] = True
    msg = "Unable to retrieve info"
    results['msg'] = msg
    logging.info('Error aon {}'.format(module.params['host']))
    logging.info(err)
    module.fail_json(msg='error on {}'.format(module.params['host']))

  return results

### ---------------------------------------------------------------------------
### MAIN
### ---------------------------------------------------------------------------

def main():
  module = AnsibleModule(
    argument_spec = dict(
      host=dict(required=True),
      ucs_user=dict(required=True),
      ucs_pass=dict(required=True),
      outputfile=dict(required=True),
      override=dict(required=False, default=False),
      logfile=dict(required=False, default=None),
      timeout=dict(required=False, default=0)
    ),
    supports_check_mode = False
  )

  logfile = module.params.get('logfile')
  if logfile is not None:
    logging.basicConfig(filename=logfile, level=logging.INFO,
      format='%(asctime)s:%(name)s:%(message)s')
    logging.getLogger().name = 'CONFIG:'+module.params['host']  

  logging.info("About to retrieve storage configurations from host: {}".format(module.params['host']))
  results = getucswwpns(module)

  module.exit_json(**results)

from ansible.module_utils.basic import *
main()

